@model Novella.ViewModels.ProductVM
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using System.Security.Claims

@{
    ViewData["Title"] = "Product Detail";
}

<main id="detail-main">
    <div class="page-path">
        <p><span id="root">Home</span><span>/</span><span id="current-path">Product Detail</span></p>
    </div>
    <div class="filter-container">
        <p class="filter-label">Filter by:</p>
        <div class="select-container">
            <select class="label-sm" id="productColor">
                <option value="#">Color</option>
                <option value="silver">Silver</option>
                <option value="gold">Gold</option>
            </select>
        </div>
        <div class="select-container">
            <select id="productMaterial">
                <option value="#">Material</option>
                <option value="silver">Silver</option>
                <option value="gold">Gold</option>
            </select>
        </div>
        <div class="select-container">
            <select class="label-sm" id="productPrice">
                <option value="#">Price</option>
                <option value="low"> < $100</option>
                <option value="medium"> < $300</option>
                <option value="high">Premium</option>
            </select>
        </div>
    </div>
    <div id="continue-shopping">
        <a href="@Url.Action("Index", "Home")">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left-short" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M12 8a.5.5 0 0 1-.5.5H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 0 1 .708.708L5.707 7.5H11.5a.5.5 0 0 1 .5.5" />
            </svg> CONTINUE SHOPPING
        </a>
    </div>
    <div class="detail-container">
        <img id="detail-img" src="~/Images/categories/chains/chain1.jpeg" />
        <div id="detail-text">
            <p id="detail-title">@Model.ProductName</p>
            <p id="detail-subtitle">@Model.ProductDescription</p>
            <div class="detail-line"></div>
            <div id="detail-qty">
                <span>Quantity</span>
                <div class="qty-container">
                    <span id="minus">-</span>
                    <span id="productQty">1</span>
                    <span id="plus">+</span>
                </div>
            </div>
            <button id="detail-add-button">
                <span id="detail-price">CDN $@Model.Price</span>
                <span>Add to Bag</span>
            </button>
            <div id="detail-rating">
                <span>Average Rating</span>
                <div class="rating-container">
                    @if (Model.Rating == 0)
                    {
                        <p class="no-rating">No ratings yet</p>
                    }
                    else
                    {
                        // Round the rating value to the nearest 0.5
                        double roundedRating = Math.Round((double)Model.Rating * 2) / 2;

                        // Calculate the number of filled stars
                        int filledStars = (int)Math.Floor(roundedRating);

                        // Check if there's a half star
                        bool hasHalfStar = roundedRating - filledStars == 0.5;

                        // Calculate the number of empty stars
                        int emptyStars = 5 - filledStars - (hasHalfStar ? 1 : 0);

                        <p class="card-rating">
                            @for (int i = 0; i < filledStars; i++)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#62aee9" stroke="#62AEE9" stroke-width="1.5" class="bi bi-star-fill filled-star" viewBox="0 0 16 16">
                                    <path d="M8 0l2.485 5.087 5.542.807-4.02 3.915.948 5.501L8 12.587l-4.955 2.323.948-5.501-4.02-3.915 5.542-.807L8 0zm-.377 1.22l1.997 4.084 4.47.652-3.253 3.171.77 4.468-4.055-2.136-4.054 2.136.77-4.468-3.253-3.171 4.47-.652 1.997-4.084z" />
                                </svg>

                            }
                            @if (hasHalfStar)
                            {
                                <svg class="half-star" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" viewBox="0 0 16 16">
                                    <!-- Left half filled star -->
                                    <path d="M8 0l-2.485 5.087L0.973 5.894l4.02 3.915-.948 5.501L8 12.587" fill="#62AEE9" />
                                    <!-- Right half empty star -->
                                    <path d="M8 0l2.485 5.087 5.542.807-4.02 3.915.948 5.501L8 12.587" stroke="#62AEE9" stroke-width="1" />
                                </svg>
                            }

                            @for (int i = 0; i < emptyStars; i++)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#62aee9" class="bi bi-star" viewBox="0 0 16 16">
                                    <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.56.56 0 0 0-.163-.505L1.71 6.745l4.052-.576a.53.53 0 0 0 .393-.288L8 2.223l1.847 3.658a.53.53 0 0 0 .393.288l4.052.575-2.906 2.77a.56.56 0 0 0-.163.506l.694 3.957-3.686-1.894a.5.5 0 0 0-.461 0z" />
                                </svg>
                            }
                        </p>
                    }
                </div>
            </div>

            <!-- New section for submitting ratings -->
            <div id="submit-rating">
                <h3>Submit Your Rating</h3>
                <form method="post" action="@Url.Action("SubmitRating", "Home")">
                    <div class="form-group">
                        <label for="rating">Rating (1.0 - 5.0):</label>
                        <input type="number" step="0.1" min="1.0" max="5.0" name="rating" id="rating" required />
                    </div>
                    <div class="form-group">
                        <label for="review">Review (optional):</label>
                        <textarea name="review" id="review" rows="4" cols="50"></textarea>
                    </div>
                    <!-- Hidden inputs for FkProductId and FkUserId -->
                    <input type="hidden" name="productId" value="@Model.ProductId" />
                    <input type="hidden" name="userId" value="@User.Identity.ToString()" />
                    <button type="submit">Submit</button>
                </form>
            </div>

            <!-- Reviews section -->
            <div id="detail-reviews">
                <h3>Written Reviews</h3>
                <ul>
                    @foreach (var review in ViewBag.Reviews)
                    {
                        <li>
                            <p><strong>@review.FirstName @review.LastName</strong> - @review.DateRated.ToString("MMMM dd, yyyy")</p>
                            <p>@review.Review</p>
                        </li>
                    }
                </ul>

                <!-- Pagination -->
                @if (ViewBag.PageCount > 1)
                {
                    <nav aria-label="Page Navigation">
                        <ul class="pagination">
                            @for (int i = 1; i <= ViewBag.PageCount; i++)
                            {
                                <li class="page-item @(ViewBag.CurrentPage == i ? "active" : "")"><a class="page-link" href="@Url.Action("Detail", new { productId = Model.ProductId, page = i })">@i</a></li>
                            }
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</main>

<script>
    // JavaScript for plus and minus buttons
    document.addEventListener('DOMContentLoaded', function () {
        var minusButton = document.getElementById('minus');
        var plusButton = document.getElementById('plus');
        var productQty = document.getElementById('productQty');
        var price = document.getElementById('detail-price');
        var cartAmount = document.getElementById('nav-cart-amount');

        // Retrieve the cart amount from session storage or default to 0
        var cartAmountValue = sessionStorage.getItem('cartAmount');
        if (cartAmountValue) {
            cartAmount.textContent = cartAmountValue;
        } else {
            cartAmount.textContent = '0';
        }

        // Parse the original price and remove "CDN $" from the text
        var originalPrice = parseFloat(price.textContent.replace('CDN $', ''));

        minusButton.addEventListener('click', function () {
            var qty = parseInt(productQty.textContent);
            if (qty > 1) {
                productQty.textContent = qty - 1;
                price.textContent = 'CDN $' + (originalPrice * (qty - 1)).toFixed(2);
                updateCartAmount(qty - 1);
            }
        });

        plusButton.addEventListener('click', function () {
            var qty = parseInt(productQty.textContent);
            productQty.textContent = qty + 1;
            price.textContent = 'CDN $' + (originalPrice * (qty + 1)).toFixed(2);
            updateCartAmount(qty + 1);
        });

        function updateCartAmount(quantity) {
            cartAmount.textContent = quantity;
            // Update session storage with the new cart amount
            sessionStorage.setItem('cartAmount', quantity);
        }
    });
</script>