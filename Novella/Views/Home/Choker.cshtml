@model IEnumerable<Novella.ViewModels.ProductCategoryVM>

<main id="pendant-main">
    <div class="page-path" id="current-path"></div>
 
    <div class="product-search-flex">
        <div class="product-search-container">
            @foreach (var item in Model)
            {
                <div class="search-product-card">
                    <a href="@Url.Action("Detail", "Home", new {productId = item.ProductId, productName =  item.ProductName, price = item.Price, description = item.Description, imageUrl = item.ImageUrl})">
                        <div class="card-image-container"><img src="@item.ImageUrl" alt="@item.ProductName" /></div>

                        <p class="search-card-title">@item.ProductName</p>
                    </a>
                    <div class="rating-container">
                        @if (item.Rating == 0)
                        {
                            <p class="no-rating">No ratings yet</p>
                        }
                        else
                        {
                            // Round the rating value to the nearest 0.5
                            double roundedRating = Math.Round((double)item.Rating * 2) / 2;

                            // Calculate the number of filled stars
                            int filledStars = (int)Math.Floor(roundedRating);

                            // Check if there's a half star
                            bool hasHalfStar = roundedRating - filledStars == 0.5;

                            // Calculate the number of empty stars
                            int emptyStars = 5 - filledStars - (hasHalfStar ? 1 : 0);

                            <p class="card-rating">
                                @for (int i = 0; i < filledStars; i++)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#62aee9" stroke="#62AEE9" stroke-width="1.5" class="bi bi-star-fill filled-star" viewBox="0 0 16 16">
                                        <path d="M8 0l2.485 5.087 5.542.807-4.02 3.915.948 5.501L8 12.587l-4.955 2.323.948-5.501-4.02-3.915 5.542-.807L8 0zm-.377 1.22l1.997 4.084 4.47.652-3.253 3.171.77 4.468-4.055-2.136-4.054 2.136.77-4.468-3.253-3.171 4.47-.652 1.997-4.084z" />
                                    </svg>

                                }
                                @if (hasHalfStar)
                                {
                                    <svg class="half-star" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" viewBox="0 0 16 16">
                                        <!-- Left half filled star -->
                                        <path d="M8 0l-2.485 5.087L0.973 5.894l4.02 3.915-.948 5.501L8 12.587" fill="#62AEE9" />
                                        <!-- Right half empty star -->
                                        <path d="M8 0l2.485 5.087 5.542.807-4.02 3.915.948 5.501L8 12.587" stroke="#62AEE9" stroke-width="1" />
                                    </svg>
                                }

                                @for (int i = 0; i < emptyStars; i++)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#62aee9" class="bi bi-star" viewBox="0 0 16 16">
                                        <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.56.56 0 0 0-.163-.505L1.71 6.745l4.052-.576a.53.53 0 0 0 .393-.288L8 2.223l1.847 3.658a.53.53 0 0 0 .393.288l4.052.575-2.906 2.77a.56.56 0 0 0-.163.506l.694 3.957-3.686-1.894a.5.5 0 0 0-.461 0z" />
                                    </svg>
                                }
                            </p>
                        }
                    </div>
                    <p class="card-price">$@item.Price</p>

                </div>
            }

        </div>
    </div>

</main>


<script>
    function updatePagePath() {
        var currentUrl = location.pathname; // Get the current URL
        var segments = currentUrl.split('/'); // Split the URL into segments
        var pagePath = document.getElementById("current-path");

        // Remove empty segments and the last segment (current page)
        var pageSegments = segments.filter(segment => segment !== "");

        // Clear the page path element
        pagePath.innerHTML = "";

        // Iterate over each segment and create links
        for (var i = 0; i < pageSegments.length; i++) {
            var link = document.createElement("a");
            link.href = "/" + pageSegments.slice(0, i + 1).join("/");
            link.textContent = pageSegments[i];
            link.classList.add("page-segment");

            // Add a slash between segments (except for the last one)
            if (i < pageSegments.length - 1) {
                pagePath.appendChild(link);
                pagePath.appendChild(document.createTextNode("/"));
            } else {
                pagePath.appendChild(link);
            }
        }
    }

    window.onload = function () {
        updatePagePath(); // Update page path on page load
    };
</script>